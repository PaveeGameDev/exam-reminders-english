generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                       @id @default(cuid())
  name                       String?
  email                      String?                      @unique
  emailVerified              DateTime?
  hashedPassword             String?
  image                      String?
  classId                    Int?
  notificationToken          String?
  accounts                   Account[]
  ClassSubjectUserPreference ClassSubjectUserPreference[]
  Exam                       Exam[]
  ExamNote                   ExamNote[]
  sessions                   Session[]
  class                      Class?                       @relation(fields: [classId], references: [id])
  UserExamPreferences        UserExamPreferences[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id                         Int                          @id @unique
  name                       String?
  ClassSubjectUserPreference ClassSubjectUserPreference[]
  ClassSubjects              ClassSubjects[]
  exams                      Exam[]
  users                      User[]
}

model ExamType {
  id          Int     @id @default(autoincrement())
  name        String
  priority    Int
  englishName String?
  Exam        Exam[]
}

model Exam {
  id                  Int                   @id @default(autoincrement())
  classId             Int
  date                DateTime
  subjectId           Int
  examTypeId          Int
  stateId             Int                   @default(0)
  followerId          String?
  class               Class                 @relation(fields: [classId], references: [id])
  examType            ExamType              @relation(fields: [examTypeId], references: [id])
  Follower            User?                 @relation(fields: [followerId], references: [id])
  State               State                 @relation(fields: [stateId], references: [id])
  examNotes           ExamNote[]
  UserExamPreferences UserExamPreferences[]
}

model ExamNote {
  id                  Int                   @id @default(autoincrement())
  userId              String
  dateCreated         DateTime
  content             String
  examId              Int
  exam                Exam                  @relation(fields: [examId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  UserExamPreferences UserExamPreferences[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String
}

model SubjectEnglish {
  id   Int    @id @default(autoincrement())
  name String
}

model State {
  id                  Int                   @id @default(autoincrement())
  name                String
  Exam                Exam[]
  UserExamPreferences UserExamPreferences[]
}

model UserExamPreferences {
  id         Int       @id @default(autoincrement())
  examId     Int
  userId     String
  examNoteId Int?
  stateId    Int       @default(0)
  exam       Exam      @relation(fields: [examId], references: [id])
  examNote   ExamNote? @relation(fields: [examNoteId], references: [id])
  State      State     @relation(fields: [stateId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model ClassSubjects {
  id                         Int                          @id @default(autoincrement())
  classId                    Int
  name                       String
  stateId                    Int                          @default(0)
  ClassSubjectUserPreference ClassSubjectUserPreference[]
  Class                      Class                        @relation(fields: [classId], references: [id])
}

model ClassSubjectUserPreference {
  id              Int           @id @default(autoincrement())
  userId          String
  classSubjectsId Int
  classId         Int?
  stateId         Int           @default(0)
  Class           Class?        @relation(fields: [classId], references: [id])
  Subject         ClassSubjects @relation(fields: [classSubjectsId], references: [id])
  User            User          @relation(fields: [userId], references: [id])
}
